
services:
  llama-cpp:
    image: ghcr.io/ggml-org/llama.cpp:server
    container_name: llama-cpp
    ports:
      - "8090:8090"
    volumes:
      - ./models:/root/.cache/llama.cpp/
    command: -hf unsloth/Llama-3.2-3B-Instruct-GGUF --embeddings --pooling mean --port 8090 --host 0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8090"]
      interval: 10s
      timeout: 30s
      retries: 20
      start_period: 30s

  minio:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
      MINIO_NOTIFY_KAFKA_ENABLE_ONE: on
      MINIO_NOTIFY_KAFKA_BROKERS_ONE: kafka:9092
      MINIO_NOTIFY_KAFKA_TOPIC_ONE: ${KAFKA_TOPIC}
      MINIO_NOTIFY_KAFKA_VERSION_ONE: 3.9.1
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: minio server --console-address ":9001" /data
    depends_on:
      kafka:
        condition: service_healthy

  minio-init:
    image: minio/mc:latest
    container_name: minio-init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
      /usr/bin/mc mb myminio/dockey-bucket;
      /usr/bin/mc policy set public myminio/dockey-bucket;
      /usr/bin/mc event add myminio/dockey-bucket arn:minio:sqs::ONE:kafka --event put;
      /usr/bin/mc admin service restart myminio;
      exit 0;
      "

  kafka:
    image: apache/kafka:3.9.1
    container_name: kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    healthcheck:
      test: /opt/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server kafka:9092 || exit 1
      interval: 1s
      timeout: 60s
      retries: 10
    ports:
      - "29092:29092"

  vector-storage:
    image: pgvector/pgvector:pg16
    container_name: vector-storage
    environment:
      POSTGRES_USER: ${VEC_DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${VEC_DATABASE_PASSWORD}
      POSTGRES_DB: ${VEC_DATABASE_NAME}
    volumes:
      - "./vector-storage/create-extension.sql:/docker-entrypoint-initdb.d/create-extension.sql:ro"
      - "./vector-storage/create-table.sql:/docker-entrypoint-initdb.d/create-table.sql:ro"
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "dockey"]
      interval: 10s
      retries: 5
      start_period: 5s

  purple:
    build:
      dockerfile: docker/Dockerfile
      context: purple-app
    container_name: purple
    depends_on:
      kafka:
        condition: service_healthy
      vector-storage:
        condition: service_healthy
      llama-cpp:
        condition: service_healthy
    ports:
      - "8095:8095"
    environment:
      VEC_DATABASE_USERNAME: ${VEC_DATABASE_USERNAME}
      VEC_DATABASE_PASSWORD: ${VEC_DATABASE_PASSWORD}
      VEC_DATABASE_URL: jdbc:postgresql://vector-storage:5432/${VEC_DATABASE_NAME}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      AWS_URL_ENDPOINT: http://minio:9000
      AWS_REGION: ${AWS_REGION}
      AWS_BUCKET_NAME: ${AWS_BUCKET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      OPEN_AI_URL_ENDPOINT: http://llama-cpp:8090
      API_PORT: 8095
